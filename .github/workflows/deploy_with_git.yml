name: "Deploy with git"

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      force_build_fe:
        description: 'Force build FE'
        required: true
        type: boolean
        default: true

concurrency:
  group: ${{ github.event.ref }}
  cancel-in-progress: true

env:
  SSH_KEY_FILE_DIR: .keys
  SSH_KEY_FILE_PATH: .keys/deploy_key.pem
  BUILD_FE: ${{ inputs.force_build_fe || false }}

jobs:
  ssh_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 10
      - name: Create deploy key file
        run: |
          mkdir ${{env.SSH_KEY_FILE_DIR}}
          echo "${{secrets.SSH_DEPLOY_KEY}}" > ${{env.SSH_KEY_FILE_PATH}}
          chmod 600 ${{env.SSH_KEY_FILE_PATH}}
      - name: Deploy BE with git
        run: |
          SSH_DEPLOY_COMMAND="cd ${{secrets.SSH_DEPLOY_PATH}} && git fetch && git reset --hard origin/main"
          NEED_RESTART_APP=true
          BUILD_FE=false
          GIT_CHANGED_FILE=$(git show --name-only --format="")
          if [[ $(echo $GIT_CHANGED_FILE | grep "\.py") == "" && $(echo $GIT_CHANGED_FILE | grep "\.sh") == "" && $(echo $GIT_CHANGED_FILE | grep "aiohttp") == "" ]]; then
              NEED_RESTART_APP=false
          fi
          if [[ $(echo $GIT_CHANGED_FILE | grep "fe_src") != "" ]]; then
              echo "BUILD_FE=true" >> $GITHUB_ENV
          fi

          if [[ $NEED_RESTART_APP == true ]]; then
              if [[ $(echo $GIT_CHANGED_FILE | grep "aiohttp") != "" ]]; then
                SSH_DEPLOY_COMMAND="$SSH_DEPLOY_COMMAND && git submodule update && ./pip-binary-install.sh"
              elif [[ $(echo $GIT_CHANGED_FILE | grep "requirements.txt") != "" ]]; then
                SSH_DEPLOY_COMMAND="$SSH_DEPLOY_COMMAND && ./pip-binary-install.sh"
              fi
              SSH_DEPLOY_COMMAND="$SSH_DEPLOY_COMMAND && ./restart-app.sh"
          fi
          echo $SSH_DEPLOY_COMMAND
          ssh -i ${{env.SSH_KEY_FILE_PATH}} -p ${{secrets.SSH_DEPLOY_PORT}} -o StrictHostKeyChecking=no ${{secrets.SSH_DEPLOY_USER}}@${{secrets.SSH_DEPLOY_HOST}} "$SSH_DEPLOY_COMMAND"
      - name: Cache node modules
        if: env.BUILD_FE == 'true'
        uses: actions/cache@v3
        with:
          path: web_viewer/fe_src/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('web_viewer/fe_src/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Build and deploy FE
        if: env.BUILD_FE == 'true'
        run: |
          cd web_viewer/fe_src
          yarn install
          yarn build
          rsync -havz --no-perms --no-owner --no-group --delete -e "ssh -i ../../${{env.SSH_KEY_FILE_PATH}} -p ${{secrets.SSH_DEPLOY_PORT}} -o StrictHostKeyChecking=no" --delete ../build ${{secrets.SSH_DEPLOY_USER}}@${{secrets.SSH_DEPLOY_HOST}}:${{secrets.SSH_DEPLOY_PATH}}/web_viewer/
      - name: Clean deploy key file
        run: rm -rf ${{env.SSH_KEY_FILE_PATH}}